void test_create_creates_new_Array();

void test_areEqual_returns_1_for_two_equal_ArrayUtils_with_all_elements_zero();
void test_areEqual_returns_1_for_two_equal_ArrayUtils_with_elements();
void test_areEqual_returns_0_for_two_ArrayUtils_With_different_length();
void test_areEqual_returns_0_for_two_ArrayUtils_With_different_typeSize();

void test_resize_returns_ArrayUtil_with_new_size();

void test_findIndex_returns_minus_1_if_the_element_is_not_found();
void test_findIndex_returns_index_if_the_element_is_found();
void test_findIndex_returns_index_if_the_element_is_found_once_more();

void test_findFirst_returns_pointer_of_the_first_element_matches_criteria ();
void test_findFirst_returns_NULL_if_none_of_the_elements_matches_criteria ();
void test_findFirst_returns_pointer_of_the_first_element_matches_criteria_for_isDivisible ();
void test_findFirst_returns_NULL_if_none_of_the_elements_matches_criteria_for_isDivisible ();

void test_findLast_returns_pointer_of_the_first_element_from_last_that_matches_criteria();
void test_findLast_returns_NULL_if_none_of_the_elements_matches_criteria ();
void test_findLast_returns_pointer_of_the_first_element_from_last_that_matches_criteria_for_isDivisible ();
void test_findLast_returns_NULL_if_none_of_the_elements_matches_criteria_for_isDivisible  ();

void test_count_returns_count_of_the_number_of_elements_that_matches_given_criteria();
void test_count_returns_count_of_the_number_of_elements_that_matches_given_criteria_for_isDivisible();
void test_count_returns_ZERO_if_none_of_the_elements_matches_given_criteria() ;

void test_filter_returns_number_of_matches_found ();
void test_filter_stopes_when_max_size_of_destination_reaches();
void test_filter_gives_the_addresses_of_matched_elements_to_destination ();
void test_filter_returns_number_of_matches_found_for_isDivisible ();
void test_filter_stopes_when_max_size_of_destination_reaches_for_isDivisible();
void test_filter_gives_the_addresses_of_matched_elements_to_destination_for_isDivisible ();